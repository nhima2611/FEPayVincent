{"version":3,"sources":["views/tickets/create/FEDropDown.tsx","views/tickets/create/FETextField.tsx","ui-component/extended/Form/InputLabel.tsx","views/tickets/create/constant.ts","views/tickets/create/index.tsx"],"names":["FEDropDown","formik","title","data","sx","color","fontWeight","marginBottom","style","height","fontSize","id","name","defaultValue","values","orderStatus","value","onChange","handleChange","map","item","index","errors","error","FETextField","required","width","borderRadius","border","borderColor","padding","marginTop","BInputLabel","styled","props","shouldForwardProp","prop","theme","horizontal","palette","text","primary","InputLabel","children","others","defaultProps","transactionType","issueType","requestedBy","validationSchema","yup","invoiceNumber","customerName","customerEmail","email","customerPhone","min","customerAddress","CreateInvoice","useFormik","initialValues","onSubmit","setOpen","useState","subTotal","appliedTaxValue","appliedDiscountValue","taxesAmount","discountAmount","totalAmount","setAllAmounts","product","description","quantity","amount","total","productsData","React","Date","valueBasic","setValueBasic","useEffect","amounts","forEach","getTotalAmounts","MainCard","handleSubmit","Grid","container","spacing","gridSpacing","xs","md","Stack","TextField","fullWidth","multiline","rows","placeholder","display","justifyContent","Button","variant","background","marginX","type","onBlur","handleBlur","touched","Boolean","helperText","Divider","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","inputFormat","renderInput","newValue"],"mappings":"2IAAA,wEAgCeA,IAvBI,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,OAA2C,IAAnCC,aAAmC,MAA3B,GAA2B,MAAvBC,YAAuB,MAAhB,GAAgB,EAC7D,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAYC,GAAI,CAAEC,MAAO,UAAWC,WAAY,OAAQC,aAAc,GAAtE,SAA4EL,IAC5E,cAAC,IAAD,CACIM,MAAO,CAAEC,OAAQ,GAAIC,SAAU,GAAIL,MAAO,kBAC1CM,GAAG,cACHC,KAAK,cACLC,aAAcZ,EAAOa,OAAOC,YAC5BC,MAAOf,EAAOa,OAAOC,YACrBE,SAAUhB,EAAOiB,aANrB,SAQKC,cAAIhB,GAAM,SAACiB,EAAMC,GAAP,OACP,cAAC,IAAD,CAAsBL,MAAOI,EAA7B,SACKA,GADUC,QAKtBpB,EAAOqB,OAAOP,aAAe,cAAC,IAAD,CAAgBQ,OAAK,EAArB,SAAuBtB,EAAOqB,OAAOP,mB,iCC3B/E,2BAwBeS,IArBK,SAAC,GAAsB,EAApBvB,OAAqB,IAAbC,EAAY,EAAZA,MAC3B,OACI,gCACI,cAAC,IAAD,CAAYE,GAAI,CAAEC,MAAO,UAAWC,WAAY,OAAQC,aAAc,GAAKkB,UAAQ,EAAnF,SACKvB,IAEL,uBACIM,MAAO,CACHkB,MAAO,OACPjB,OAAQ,GACRkB,aAAc,EACdC,OAAQ,YACRC,YAAa,UACbC,QAAQ,WACRC,UAAW,U,8NCdzBC,EAAcC,aAAO,SAACC,GAAD,OAA+B,cAAC,IAAD,eAAmBA,MAAW,CACpFC,kBAAmB,SAACC,GAAD,MAAmB,eAATA,IADbH,EAEjB,gBAAGI,EAAH,EAAGA,MAAOC,EAAV,EAAUA,WAAV,MAA4B,CAC3BjC,MAAOgC,EAAME,QAAQC,KAAKC,QAC1BnC,WAAY,IACZC,aAAc+B,EAAa,EAAI,MAO7BI,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUL,EAAb,EAAaA,WAAeM,EAA5B,wBACf,cAACZ,EAAD,yBAAaM,WAAYA,GAAgBM,GAAzC,aACKD,MAITD,EAAWG,aAAe,CACtBP,YAAY,GAGDI,Q,6CCzBTI,EAAkB,CAAC,YAAa,gBAChCC,EAAY,CAAC,qBAAsB,gBAAiB,yBAA0B,gBAC9EC,EAAc,CAAC,2BAAuB,6BAAyB,wBCmC/DC,EAAmBC,IAAW,CAChCC,cAAeD,MAAazB,SAAS,8BACrC2B,aAAcF,MAAazB,SAAS,6BACpC4B,cAAeH,MAAaI,MAAM,uBAAuB7B,SAAS,8BAClE8B,cAAeL,MAAaM,IAAI,GAAI,mDAAmD/B,SAAS,8BAChGgC,gBAAiBP,MAAazB,SAAS,gCACvCV,YAAamC,MAAazB,SAAS,8BA6RxBiC,UAxRf,WACI,IAAMzD,EAAS0D,YAAU,CACrBC,cAAe,CACXT,cAAe,GACfC,aAAc,GACdC,cAAe,GACfE,cAAe,GACfE,gBAAiB,GACjB1C,YAAa,WAEjBkC,mBACAY,SAAU,SAAC/C,GACHA,GACAgD,GAAQ,MAiCpB,EAAoCC,mBAAS,CACzCC,SAAU,EACVC,gBAAiB,GACjBC,qBAAsB,IACtBC,YAAa,EACbC,eAAgB,EAChBC,YAAa,IANjB,mBAAmBC,GAAnB,WAQA,EAAwCP,mBAnCb,CACvB,CACIpD,GAAI,EACJ4D,QAAS,cACTC,YAAa,4DACbC,SAAU,EACVC,OAAQ,IACRC,MAAO,MAEX,CACIhE,GAAI,EACJ4D,QAAS,eACTC,YAAa,4DACbC,SAAU,EACVC,OAAQ,IACRC,MAAO,KAEX,CACIhE,GAAI,EACJ4D,QAAS,iBACTC,YAAa,4DACbC,SAAU,EACVC,OAAQ,IACRC,MAAO,OAYf,mBAAOC,EAAP,KACA,GADA,KACwBb,oBAAS,IAAjC,mBAAaD,GAAb,WACA,EAAoCe,IAAMd,SAAsB,IAAIe,MAApE,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA4CjB,oBAAkB,GAA9D,mBAuDA,OAvDA,UAsBAkB,qBAAU,YAnBc,WACpB,IAAMC,EAAU,CACZlB,SAAU,EACVC,gBAAiB,GACjBC,qBAAsB,IACtBC,YAAa,EACbC,eAAgB,EAChBC,YAAa,GAEjBO,EAAaO,SAAQ,SAAC/D,GAClB8D,EAAQlB,UAAY5C,EAAKuD,SAE7BO,EAAQf,YAAce,EAAQlB,SAAWkB,EAAQjB,gBACjDiB,EAAQd,gBAAkBc,EAAQlB,SAAWkB,EAAQf,aAAee,EAAQhB,qBAC5EgB,EAAQb,YAAca,EAAQlB,SAAWkB,EAAQf,YAAce,EAAQd,eACvEE,EAAcY,GAKdE,KAED,CAACR,IA+BA,cAACS,EAAA,EAAD,CAAUnF,MAAM,gBAAhB,SACI,sBAAM2D,SAAU5D,EAAOqF,aAAvB,SACI,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAASC,IAAzB,UACI,cAACH,EAAA,EAAD,CAAMnE,MAAI,EAACuE,GAAI,GAAIC,GAAI,EAAvB,SACI,cAAC5F,EAAA,EAAD,CAAYC,OAAQA,EAAQC,MAAM,mBAAmBC,KAAM2C,MAE/D,cAACyC,EAAA,EAAD,CAAMnE,MAAI,EAACuE,GAAI,GAAIC,GAAI,EAAvB,SACI,cAAC5F,EAAA,EAAD,CAAYC,OAAQA,EAAQC,MAAM,aAAaC,KAAM4C,MAEzD,cAACwC,EAAA,EAAD,CAAMnE,MAAI,EAACuE,GAAI,GAAIC,GAAI,EAAvB,SACI,cAAC5F,EAAA,EAAD,CAAYC,OAAQA,EAAQC,MAAM,qBAEtC,cAACqF,EAAA,EAAD,CAAMnE,MAAI,EAACuE,GAAI,GAAIC,GAAI,EAAvB,SACI,cAAC5F,EAAA,EAAD,CAAYC,OAAQA,EAAQC,MAAM,eAAeC,KAAM6C,MAG3D,cAACuC,EAAA,EAAD,CAAMnE,MAAI,EAACuE,GAAI,GAAIC,GAAI,EAAvB,SACI,cAACpE,EAAA,EAAD,CAAavB,OAAQA,EAAQC,MAAM,iBAEvC,cAACqF,EAAA,EAAD,CAAMnE,MAAI,EAACuE,GAAI,GAAIC,GAAI,EAAvB,SACI,cAACpE,EAAA,EAAD,CAAavB,OAAQA,EAAQC,MAAM,uBAEvC,cAACqF,EAAA,EAAD,CAAMnE,MAAI,EAACuE,GAAI,GAAIC,GAAI,EAAvB,SACI,cAACpE,EAAA,EAAD,CAAavB,OAAQA,EAAQC,MAAM,yBAEvC,cAACqF,EAAA,EAAD,CAAMnE,MAAI,EAACuE,GAAI,GAAIC,GAAI,EAAvB,SACI,cAACpE,EAAA,EAAD,CAAavB,OAAQA,EAAQC,MAAM,sBAEvC,cAACqF,EAAA,EAAD,CAAMnE,MAAI,EAACuE,GAAI,GAAIC,GAAI,EAAvB,SACI,cAACpE,EAAA,EAAD,CAAavB,OAAQA,EAAQC,MAAM,mBAEvC,cAACqF,EAAA,EAAD,CAAMnE,MAAI,EAACuE,GAAI,GAAIC,GAAI,EAAvB,SACI,cAACpE,EAAA,EAAD,CAAavB,OAAQA,EAAQC,MAAM,8BAEvC,cAACqF,EAAA,EAAD,CAAMnE,MAAI,EAACuE,GAAI,GAAIC,GAAI,EAAvB,SACI,cAACpE,EAAA,EAAD,CAAavB,OAAQA,EAAQC,MAAM,+BAEvC,cAACqF,EAAA,EAAD,CAAMnE,MAAI,EAACuE,GAAI,GAAIC,GAAI,IAEvB,cAACL,EAAA,EAAD,CAAMnE,MAAI,EAACuE,GAAI,GAAIC,GAAI,EAAvB,SACI,cAACpE,EAAA,EAAD,CAAavB,OAAQA,EAAQC,MAAM,iBAEvC,cAACqF,EAAA,EAAD,CAAMnE,MAAI,EAACuE,GAAI,GAAIC,GAAI,EAAvB,SACI,cAACpE,EAAA,EAAD,CAAavB,OAAQA,EAAQC,MAAM,mBAEvC,cAACqF,EAAA,EAAD,CAAMnE,MAAI,EAACuE,GAAI,GAAIC,GAAI,EAAvB,SACI,cAACpE,EAAA,EAAD,CAAavB,OAAQA,EAAQC,MAAM,4BAGvC,cAACqF,EAAA,EAAD,CAAMnE,MAAI,EAACuE,GAAI,GAAf,SACI,eAACE,EAAA,EAAD,WACI,cAAC,EAAD,CAAYzF,GAAI,CAAEC,MAAO,UAAWC,WAAY,OAAQC,aAAc,GAAtE,yBACA,cAACuF,EAAA,EAAD,CACIC,WAAS,EACTpF,GAAG,kBACHC,KAAK,kBACLC,aAAa,sCACbmF,WAAS,EACTC,KAAM,EACNC,YAAY,2BAKxB,eAACX,EAAA,EAAD,CAAMnE,MAAI,EAAChB,GAAI,CAAE+F,QAAS,OAAQC,eAAgB,YAAcT,GAAI,GAApE,UACI,cAACU,EAAA,EAAD,CAAQC,QAAQ,YAAYlG,GAAI,CAAEmG,WAAY,UAAW7F,SAAU,IAAnE,oBAGA,cAAC2F,EAAA,EAAD,CAAQC,QAAQ,YAAYlG,GAAI,CAAEoG,QAAS,EAAG9F,SAAU,IAAxD,2BAGA,cAAC2F,EAAA,EAAD,CAAQjG,GAAI,CAAEmG,WAAY,UAAW7F,SAAU,IAAM4F,QAAQ,YAAYG,KAAK,SAA9E,uBAuDJ,cAAClB,EAAA,EAAD,CAAMnE,MAAI,EAACuE,GAAI,GAAf,SACI,eAACE,EAAA,EAAD,WACI,cAAC,EAAD,CAAYpE,UAAQ,EAApB,8BACA,cAACqE,EAAA,EAAD,CACIC,WAAS,EACTpF,GAAG,kBACHC,KAAK,kBACLI,MAAOf,EAAOa,OAAO2C,gBACrBiD,OAAQzG,EAAO0G,WACfpF,MAAOtB,EAAO2G,QAAQnD,iBAAmBoD,QAAQ5G,EAAOqB,OAAOmC,iBAC/DqD,WAAY7G,EAAO2G,QAAQnD,iBAAmBxD,EAAOqB,OAAOmC,gBAC5DxC,SAAUhB,EAAOiB,aACjB8E,WAAS,EACTE,YAAY,uBAIxB,cAACX,EAAA,EAAD,CAAMnE,MAAI,EAACuE,GAAI,GAAf,SACI,cAACoB,EAAA,EAAD,MAEJ,cAACxB,EAAA,EAAD,CAAMnE,MAAI,EAACuE,GAAI,GAAIC,GAAI,EAAvB,SACI,eAACC,EAAA,EAAD,WACI,cAAC,EAAD,CAAYpE,UAAQ,EAApB,0BACA,cAACuF,EAAA,EAAD,CAAsBC,YAAaC,IAAnC,SACI,cAACC,EAAA,EAAD,CACIC,YAAY,aACZC,YAAa,SAACnF,GAAD,OAAW,cAAC4D,EAAA,EAAD,aAAWC,WAAS,GAAK7D,KACjDlB,MAAO+D,EACP9D,SAAU,SAACqG,GACPtC,EAAcsC","file":"static/js/17.fea27790.chunk.js","sourcesContent":["import { FormHelperText, InputLabel, MenuItem, Select, Stack } from '@mui/material';\r\nimport { map } from 'lodash';\r\nimport React from 'react';\r\n\r\ninterface Props {\r\n    formik: any;\r\n    title: string;\r\n    data?: any[];\r\n}\r\nconst FEDropDown = ({ formik, title = '', data = [] }: Props) => {\r\n    return (\r\n        <Stack>\r\n            <InputLabel sx={{ color: '#4C4C4C', fontWeight: 'bold', marginBottom: 1 }}>{title}</InputLabel>\r\n            <Select\r\n                style={{ height: 36, fontSize: 12, color: 'red !important' }}\r\n                id=\"orderStatus\"\r\n                name=\"orderStatus\"\r\n                defaultValue={formik.values.orderStatus}\r\n                value={formik.values.orderStatus}\r\n                onChange={formik.handleChange}\r\n            >\r\n                {map(data, (item, index) => (\r\n                    <MenuItem key={index} value={item}>\r\n                        {item}\r\n                    </MenuItem>\r\n                ))}\r\n            </Select>\r\n            {formik.errors.orderStatus && <FormHelperText error>{formik.errors.orderStatus}</FormHelperText>}\r\n        </Stack>\r\n    );\r\n};\r\n\r\nexport default FEDropDown;\r\n","import { TextField, InputLabel, MenuItem, Select, Stack, OutlinedInput } from '@mui/material';\r\nimport React from 'react';\r\n\r\nconst FETextField = ({ formik, title }) => {\r\n    return (\r\n        <div>\r\n            <InputLabel sx={{ color: '#4C4C4C', fontWeight: 'bold', marginBottom: 1 }} required>\r\n                {title}\r\n            </InputLabel>\r\n            <input\r\n                style={{\r\n                    width: '100%',\r\n                    height: 36,\r\n                    borderRadius: 8,\r\n                    border: '1px solid',\r\n                    borderColor: '#e5e5e5',\r\n                    padding: `4px 12px`,\r\n                    marginTop: 4\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FETextField;\r\n","import { experimentalStyled as styled } from '@mui/material/styles';\r\nimport { InputLabel as MuiInputLabel, InputLabelProps } from '@mui/material';\r\n\r\nconst BInputLabel = styled((props: MUIInputLabelProps) => <MuiInputLabel {...props} />, {\r\n    shouldForwardProp: (prop) => prop !== 'horizontal'\r\n})(({ theme, horizontal }) => ({\r\n    color: theme.palette.text.primary,\r\n    fontWeight: 500,\r\n    marginBottom: horizontal ? 0 : 8\r\n}));\r\n\r\ninterface MUIInputLabelProps extends InputLabelProps {\r\n    horizontal?: boolean;\r\n}\r\n\r\nconst InputLabel = ({ children, horizontal, ...others }: MUIInputLabelProps) => (\r\n    <BInputLabel horizontal={horizontal} {...others}>\r\n        {children}\r\n    </BInputLabel>\r\n);\r\n\r\nInputLabel.defaultProps = {\r\n    horizontal: false\r\n};\r\n\r\nexport default InputLabel;\r\n","const transactionType = ['Repayment', 'Disbursement'];\r\nconst issueType = ['Cancel transaction', 'Adjust Amount', 'Adjust Contract Number', 'System Issue'];\r\nconst requestedBy = ['By Teller’s mistake', 'By Customer’s request', 'By Banca’s team'];\r\n\r\nexport { transactionType, issueType, requestedBy };\r\n","import React, { useEffect, useState } from 'react';\r\n\r\n// material-ui\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    Divider,\r\n    FormHelperText,\r\n    Grid,\r\n    MenuItem,\r\n    Select,\r\n    Stack,\r\n    TextField,\r\n    Typography\r\n} from '@mui/material';\r\nimport { DatePicker, LocalizationProvider } from '@mui/lab';\r\n\r\n// project imports\r\nimport AddItemPage from './CreateInvoice/AddItemPage';\r\nimport { gridSpacing } from 'store/constant';\r\nimport InputLabel from 'ui-component/extended/Form/InputLabel';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\n\r\n// third-party\r\nimport * as yup from 'yup';\r\nimport ProductsPage from './CreateInvoice/ProductsPage';\r\nimport TotalCard from './CreateInvoice/TotalCard';\r\nimport { useFormik } from 'formik';\r\nimport FEDropDown from './FEDropDown';\r\nimport FETextField from './FETextField';\r\nimport { issueType, requestedBy, transactionType } from './constant';\r\n\r\n// yup validation-schema\r\nconst validationSchema = yup.object({\r\n    invoiceNumber: yup.string().required('Invoice Number is Required'),\r\n    customerName: yup.string().required('Customer Name is Required'),\r\n    customerEmail: yup.string().email('Enter a valid email').required('Customer Email is Required'),\r\n    customerPhone: yup.string().min(10, 'Phone number should be of minimum 10 characters').required('Customer Phone is Required'),\r\n    customerAddress: yup.string().required('Customer Address is Required'),\r\n    orderStatus: yup.string().required('Order Status is required')\r\n});\r\n\r\n// ==============================|| CREATE INVOICE ||============================== //\r\n\r\nfunction CreateInvoice() {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            invoiceNumber: '',\r\n            customerName: '',\r\n            customerEmail: '',\r\n            customerPhone: '',\r\n            customerAddress: '',\r\n            orderStatus: 'pending'\r\n        },\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            if (values) {\r\n                setOpen(true);\r\n            }\r\n        }\r\n    });\r\n\r\n    // array of products\r\n    const initialProducsData = [\r\n        {\r\n            id: 1,\r\n            product: 'Logo Design',\r\n            description: 'lorem ipsum dolor sit amat, connecter adieu siccing eliot',\r\n            quantity: 6,\r\n            amount: 200.0,\r\n            total: 1200.0\r\n        },\r\n        {\r\n            id: 2,\r\n            product: 'Landing Page',\r\n            description: 'lorem ipsum dolor sit amat, connecter adieu siccing eliot',\r\n            quantity: 7,\r\n            amount: 100.0,\r\n            total: 700.0\r\n        },\r\n        {\r\n            id: 3,\r\n            product: 'Admin Template',\r\n            description: 'lorem ipsum dolor sit amat, connecter adieu siccing eliot',\r\n            quantity: 5,\r\n            amount: 150.0,\r\n            total: 750.0\r\n        }\r\n    ];\r\n\r\n    const [allAmounts, setAllAmounts] = useState({\r\n        subTotal: 0,\r\n        appliedTaxValue: 0.1,\r\n        appliedDiscountValue: 0.05,\r\n        taxesAmount: 0,\r\n        discountAmount: 0,\r\n        totalAmount: 0\r\n    });\r\n    const [productsData, setProductsData] = useState(initialProducsData);\r\n    const [open, setOpen] = useState(false);\r\n    const [valueBasic, setValueBasic] = React.useState<Date | null>(new Date());\r\n    const [addItemClicked, setAddItemClicked] = useState<boolean>(false);\r\n\r\n    // for calculating cost of all orders\r\n    const getTotalAmounts = () => {\r\n        const amounts = {\r\n            subTotal: 0,\r\n            appliedTaxValue: 0.1,\r\n            appliedDiscountValue: 0.05,\r\n            taxesAmount: 0,\r\n            discountAmount: 0,\r\n            totalAmount: 0\r\n        };\r\n        productsData.forEach((item) => {\r\n            amounts.subTotal += item.total;\r\n        });\r\n        amounts.taxesAmount = amounts.subTotal * amounts.appliedTaxValue;\r\n        amounts.discountAmount = (amounts.subTotal + amounts.taxesAmount) * amounts.appliedDiscountValue;\r\n        amounts.totalAmount = amounts.subTotal + amounts.taxesAmount - amounts.discountAmount;\r\n        setAllAmounts(amounts);\r\n    };\r\n\r\n    // calculates costs when order-details change\r\n    useEffect(() => {\r\n        getTotalAmounts();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [productsData]);\r\n\r\n    // to delete row in order details\r\n    const deleteProductHandler = (id: number) => {\r\n        setProductsData(productsData.filter((item) => item.id !== id));\r\n    };\r\n\r\n    // Dialog Handler\r\n    const handleDialogOk = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n    };\r\n\r\n    // add item handler\r\n    const handleAddItem = (addingData: any) => {\r\n        setProductsData([\r\n            ...productsData,\r\n            {\r\n                id: addingData.id,\r\n                product: addingData.name,\r\n                description: addingData.desc,\r\n                quantity: addingData.selectedQuantity,\r\n                amount: addingData.amount,\r\n                total: addingData.totalAmount\r\n            }\r\n        ]);\r\n\r\n        setAddItemClicked(false);\r\n    };\r\n\r\n    return (\r\n        <MainCard title=\"Create Ticket\">\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <Grid container spacing={gridSpacing}>\r\n                    <Grid item xs={12} md={3}>\r\n                        <FEDropDown formik={formik} title=\"Transaction Type\" data={transactionType} />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={3}>\r\n                        <FEDropDown formik={formik} title=\"Issue Type\" data={issueType} />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={3}>\r\n                        <FEDropDown formik={formik} title=\"Sub Issue Type\" />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={3}>\r\n                        <FEDropDown formik={formik} title=\"Requested By\" data={requestedBy} />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} md={3}>\r\n                        <FETextField formik={formik} title=\"REF Number\" />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={3}>\r\n                        <FETextField formik={formik} title=\"Transaction Date\" />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={3}>\r\n                        <FETextField formik={formik} title=\"Transaction Amount\" />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={3}>\r\n                        <FETextField formik={formik} title=\"Contract Number\" />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={3}>\r\n                        <FETextField formik={formik} title=\"Product Type\" />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={3}>\r\n                        <FETextField formik={formik} title=\"Requester's National ID\" />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={3}>\r\n                        <FETextField formik={formik} title=\"Requester's Phone Number\" />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={3} />\r\n\r\n                    <Grid item xs={12} md={3}>\r\n                        <FETextField formik={formik} title=\"REF Number\" />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={3}>\r\n                        <FETextField formik={formik} title=\"Right Amount\" />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={3}>\r\n                        <FETextField formik={formik} title=\"Right Contract Number\" />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <Stack>\r\n                            <InputLabel sx={{ color: '#4C4C4C', fontWeight: 'bold', marginBottom: 1 }}>Description</InputLabel>\r\n                            <TextField\r\n                                fullWidth\r\n                                id=\"customerAddress\"\r\n                                name=\"customerAddress\"\r\n                                defaultValue=\"I acknowledge terms and conditions.\"\r\n                                multiline\r\n                                rows={4}\r\n                                placeholder=\"Enter Description\"\r\n                            />\r\n                        </Stack>\r\n                    </Grid>\r\n\r\n                    <Grid item sx={{ display: 'flex', justifyContent: 'flex-end' }} xs={12}>\r\n                        <Button variant=\"contained\" sx={{ background: '#B3B3B3', fontSize: 12 }}>\r\n                            Cancel\r\n                        </Button>\r\n                        <Button variant=\"contained\" sx={{ marginX: 1, fontSize: 12 }}>\r\n                            Save as Draft\r\n                        </Button>\r\n                        <Button sx={{ background: '#27AE60', fontSize: 12 }} variant=\"contained\" type=\"submit\">\r\n                            Submit\r\n                        </Button>\r\n                    </Grid>\r\n\r\n                    {/* <Grid item xs={12} md={4}>\r\n                            <Stack>\r\n                                <InputLabel required>Customer Name</InputLabel>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    id=\"customerName\"\r\n                                    name=\"customerName\"\r\n                                    value={formik.values.customerName}\r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                    error={formik.touched.customerName && Boolean(formik.errors.customerName)}\r\n                                    helperText={formik.touched.customerName && formik.errors.customerName}\r\n                                    placeholder=\"Alex Z.\"\r\n                                />\r\n                            </Stack>\r\n                        </Grid> */}\r\n                    {/* <Grid item xs={12} md={4}>\r\n                            <Stack>\r\n                                <InputLabel required>Customer Email</InputLabel>\r\n                                <TextField\r\n                                    type=\"email\"\r\n                                    fullWidth\r\n                                    id=\"customerEmail\"\r\n                                    name=\"customerEmail\"\r\n                                    value={formik.values.customerEmail}\r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                    error={formik.touched.customerEmail && Boolean(formik.errors.customerEmail)}\r\n                                    helperText={formik.touched.customerEmail && formik.errors.customerEmail}\r\n                                    placeholder=\"alex@company.com\"\r\n                                />\r\n                            </Stack>\r\n                        </Grid> */}\r\n                    {/* <Grid item xs={12} md={4}>\r\n                            <Stack>\r\n                                <InputLabel required>Customer Contact Numer</InputLabel>\r\n                                <TextField\r\n                                    type=\"number\"\r\n                                    fullWidth\r\n                                    id=\"customerPhone\"\r\n                                    name=\"customerPhone\"\r\n                                    value={formik.values.customerPhone}\r\n                                    onBlur={formik.handleBlur}\r\n                                    error={formik.touched.customerPhone && Boolean(formik.errors.customerPhone)}\r\n                                    helperText={formik.touched.customerPhone && formik.errors.customerPhone}\r\n                                    onChange={formik.handleChange}\r\n                                    placeholder=\"+ 00 00000 00000\"\r\n                                />\r\n                            </Stack>\r\n                        </Grid> */}\r\n                    <Grid item xs={12}>\r\n                        <Stack>\r\n                            <InputLabel required>Customer Address</InputLabel>\r\n                            <TextField\r\n                                fullWidth\r\n                                id=\"customerAddress\"\r\n                                name=\"customerAddress\"\r\n                                value={formik.values.customerAddress}\r\n                                onBlur={formik.handleBlur}\r\n                                error={formik.touched.customerAddress && Boolean(formik.errors.customerAddress)}\r\n                                helperText={formik.touched.customerAddress && formik.errors.customerAddress}\r\n                                onChange={formik.handleChange}\r\n                                multiline\r\n                                placeholder=\"Enter Address\"\r\n                            />\r\n                        </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Divider />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <Stack>\r\n                            <InputLabel required>Invoice Date</InputLabel>\r\n                            <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                <DatePicker\r\n                                    inputFormat=\"dd/MM/yyyy\"\r\n                                    renderInput={(props) => <TextField fullWidth {...props} />}\r\n                                    value={valueBasic}\r\n                                    onChange={(newValue: Date | null) => {\r\n                                        setValueBasic(newValue);\r\n                                    }}\r\n                                />\r\n                            </LocalizationProvider>\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </MainCard>\r\n    );\r\n}\r\n\r\nexport default CreateInvoice;\r\n"],"sourceRoot":""}