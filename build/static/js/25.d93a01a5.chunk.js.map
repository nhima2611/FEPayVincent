{"version":3,"sources":["utils/eventEmitter.ts","services/core/baseApi.service.ts","utils/toastify.ts","components/table/FETable.tsx","services/partner-services/index.ts","components/ActionPartner.tsx","views/partner-management/pos/list.tsx","views/partner-management/pos/index.tsx"],"names":["EventEmitter","BaseApiService","apiName","filter","query","axiosServices","get","this","id","includeOption","params","JSON","stringify","delete","model","patch","convertDateStringsToDates","put","_","omit","post","payload","key","hasOwnProperty","value","moment","ISO_8601","isValid","format","toString","showToast","type","msg","toast","refFETable","createRef","FETable","data","columns","onClickRowItem","showCustomFilter","rowId","disableCheckbox","manualSortBy","manualPagination","filterTypes","React","useMemo","text","rows","filterValue","row","rowValue","values","undefined","String","toLowerCase","startsWith","useContext","TableContext","queryPageIndex","queryPageSize","totalCount","dispatch","useTable","initialState","pageIndex","pageSize","disableSortRemove","manualFilters","pageCount","autoResetSelectedRows","getRowId","useFilters","useSortBy","usePagination","useRowSelect","hooks","visibleColumns","push","columnss","Header","getToggleAllPageRowsSelectedProps","IndeterminateCheckbox","Cell","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","pageOptions","canPreviousPage","canNextPage","gotoPage","setPageSize","nextPage","previousPage","toggleAllPageRowsSelected","selectedFlatRows","setAllFilters","setFilter","state","sortBy","filters","selectedRowIds","onClear","handleDeselectAllRow","flag","useImperativeHandle","useEffect","eventEmitter","addListener","emptyRows","Math","max","length","useState","dense","size","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","sx","padding","minWidth","textAlign","active","isSorted","direction","isSortedDesc","IconComponent","ArrowDropDownIcon","render","component","visuallyHidden","onClick","cursor","px","canFilter","Boolean","colSpan","hover","getRowProps","textDecoration","cells","cell","getCellProps","style","height","rowsPerPageOptions","count","rowsPerPage","onPageChange","event","newPage","onRowsPerPageChange","Number","target","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","current","stopPropagation","PartnerService","OutlineInputStyle","styled","OutlinedInput","shouldForwardProp","theme","width","marginLeft","marginRight","paddingLeft","paddingRight","background","breakpoints","down","palette","mode","dark","Input","display","ActionPartner","onClickUser","urlAddTicket","onClickDownload","onUploadFile","onClickTrash","title","useTheme","useAuth","user","selectedIds","setValue","emit","handleFileSelect","files","mb","keys","spacing","marginBottom","styles","btn","variant","htmlFor","accept","onChange","e","flexGrow","placeholder","startAdornment","position","stroke","color","grey","inputProps","borderColor","borderRadius","fontSize","fontWeight","startIcon","Link","to","PosList","loading","cols","anchorEl","setAnchorEl","handleClick","currentTarget","handleClose","productsColumns","startCase","camelCase","accessor","IconButton","Filter","maxHeight","overflow","productsData","MainCard","content","border","Menu","keepMounted","open","onClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","PosPage","sortByObject","resetState","searchTerm","setSearchTerm","useQuery","page_size","search","view_type","sortByProps","desc","filtersByData","it","isDateType","includes","join","partnerServices","getAll","keepPreviousData","onError","err","toastify","message","onSuccess","res","meta","pagination","total","isLoading","dataTable","handleSearch","refetch","useNavigate","debounce","maxWait","removeAllListeners","Box","Grid","container","item","xs","contentSX","p"],"mappings":"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","file":"static/js/25.d93a01a5.chunk.js","sourcesContent":["import EventEmitter from 'events';\r\n\r\nexport default new EventEmitter();\r\n","/* eslint-disable no-continue */\r\n/* eslint-disable no-prototype-builtins */\r\nimport _ from 'lodash';\r\nimport axiosServices from 'utils/axios';\r\n\r\nexport abstract class BaseApiService {\r\n    constructor(protected apiName: string) {}\r\n\r\n    getAll(filter?: any) {\r\n        const query = filter ? `?${filter}` : '';\r\n        return axiosServices.get(`${this.apiName}${query}`);\r\n    }\r\n\r\n    getById(id: string | any, includeOption?: any) {\r\n        return axiosServices.get(`${this.apiName}/${id}`, {\r\n            params: { filter: JSON.stringify(includeOption) }\r\n        });\r\n    }\r\n\r\n    delete(id: any) {\r\n        return axiosServices.delete(`${this.apiName}/${id}`);\r\n    }\r\n\r\n    updatePatch(model: any) {\r\n        return axiosServices.patch(`${this.apiName}/${model.id}`, model);\r\n    }\r\n\r\n    updatePut(model: any) {\r\n        model = this.convertDateStringsToDates(model);\r\n        return axiosServices.put(`${this.apiName}/${model.id}`, model);\r\n    }\r\n\r\n    insert(model: any) {\r\n        model = _.omit(model, ['id']);\r\n        model = this.convertDateStringsToDates(model);\r\n        return axiosServices.post(`${this.apiName}`, model);\r\n    }\r\n\r\n    convertDateStringsToDates(payload: any) {\r\n        // Ignore things that aren't objects.\r\n        if (typeof payload !== 'object') return payload;\r\n\r\n        for (const key in payload) {\r\n            if (!payload.hasOwnProperty(key)) continue;\r\n            const value = payload[key];\r\n            // Check for string properties which look like dates.\r\n            if (moment(value, moment.ISO_8601).isValid()) {\r\n                payload[key] = moment(value).format('yyyy-MM-DD hh:mm:ss').toString();\r\n            } else if (typeof value === 'object') {\r\n                // Recurse into object\r\n                this.convertDateStringsToDates(value);\r\n            }\r\n        }\r\n        return payload;\r\n    }\r\n}\r\n","import { toast, TypeOptions } from 'react-toastify';\r\n\r\nconst showToast = (type?: TypeOptions, msg?: string) => {\r\n    toast(msg, {\r\n        type\r\n    });\r\n};\r\n\r\nexport default { showToast };\r\n","import ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\r\nimport {\r\n    Box,\r\n    Checkbox,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TablePagination,\r\n    TableRow,\r\n    TableSortLabel,\r\n    Typography\r\n} from '@mui/material';\r\nimport { visuallyHidden } from '@mui/utils';\r\nimport TableContext from 'contexts/TableContext';\r\nimport React, { createRef, useContext, useImperativeHandle } from 'react';\r\nimport { useFilters, usePagination, useRowSelect, useSortBy, useTable } from 'react-table';\r\nimport eventEmitter from 'utils/eventEmitter';\r\n\r\ninterface Props {\r\n    data: any;\r\n    columns: any;\r\n    onClickRowItem?: (it?: any) => void;\r\n    showCustomFilter?: boolean;\r\n    rowId?: string;\r\n    disableCheckbox?: boolean;\r\n    manualSortBy?: boolean;\r\n    manualPagination?: boolean;\r\n}\r\nexport const refFETable = createRef<any>();\r\nconst FETable = ({\r\n    data,\r\n    columns,\r\n    onClickRowItem,\r\n    showCustomFilter = false,\r\n    rowId = '',\r\n    disableCheckbox,\r\n    manualSortBy = true,\r\n    manualPagination = true\r\n}: Props) => {\r\n    const filterTypes = React.useMemo(\r\n        () => ({\r\n            // Add a new fuzzyTextFilterFn filter type.\r\n            //   fuzzyText: fuzzyTextFilterFn,\r\n            // Or, override the default text filter to use\r\n            // \"startWith\"\r\n            text: (rows, id, filterValue) => {\r\n                return rows.filter((row) => {\r\n                    const rowValue = row?.values[id];\r\n                    return rowValue !== undefined ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()) : true;\r\n                });\r\n            }\r\n        }),\r\n        []\r\n    );\r\n\r\n    const [{ queryPageIndex, queryPageSize, totalCount }, dispatch] = useContext(TableContext);\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        prepareRow,\r\n        page, // Instead of using 'rows', we'll use page,\r\n        // which has only the rows for the active page\r\n\r\n        // The rest of these things are super handy, too ;)\r\n        canPreviousPage,\r\n        canNextPage,\r\n        pageOptions,\r\n        pageCount,\r\n        gotoPage,\r\n        nextPage,\r\n        previousPage,\r\n        setPageSize,\r\n        selectedFlatRows,\r\n        toggleAllPageRowsSelected,\r\n        setAllFilters,\r\n        setFilter,\r\n        state: { pageIndex, pageSize, sortBy, filters, selectedRowIds }\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            initialState: {\r\n                pageIndex: queryPageIndex,\r\n                pageSize: queryPageSize\r\n            },\r\n            manualSortBy,\r\n            disableSortRemove: true,\r\n            manualPagination,\r\n            manualFilters: true,\r\n            pageCount: totalCount,\r\n            filterTypes,\r\n            autoResetSelectedRows: false,\r\n            getRowId: (row: any) => _.get(row, rowId)\r\n        },\r\n        useFilters,\r\n        useSortBy,\r\n        usePagination,\r\n        useRowSelect,\r\n        (hooks) => {\r\n            if (disableCheckbox) return;\r\n            hooks.visibleColumns.push((columnss) => [\r\n                // Let's make a column for selection\r\n                {\r\n                    id: 'selection',\r\n                    // The header can use the table's getToggleAllRowsSelectedProps method\r\n                    // to render a checkbox\r\n                    Header: ({ getToggleAllPageRowsSelectedProps }) => (\r\n                        <div>\r\n                            <IndeterminateCheckbox {...getToggleAllPageRowsSelectedProps()} />\r\n                        </div>\r\n                    ),\r\n                    // The cell can use the individual row's getToggleRowSelectedProps method\r\n                    // to the render a checkbox\r\n                    Cell: ({ row }) => (\r\n                        <div>\r\n                            <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\r\n                        </div>\r\n                    )\r\n                },\r\n                ...columnss\r\n            ]);\r\n        }\r\n    );\r\n\r\n    const onClear = () => setAllFilters([]);\r\n\r\n    const handleDeselectAllRow = (flag: boolean) => {\r\n        if (flag) {\r\n            toggleAllPageRowsSelected(false);\r\n        }\r\n    };\r\n\r\n    useImperativeHandle(refFETable, () => ({\r\n        setFilter\r\n    }));\r\n\r\n    React.useEffect(() => {\r\n        eventEmitter.addListener('DESELECT_ALL_ROWS', handleDeselectAllRow);\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        dispatch({ type: 'PAGE_SIZE_CHANGED', payload: pageSize });\r\n        gotoPage(0);\r\n    }, [pageSize, gotoPage]);\r\n\r\n    React.useEffect(() => {\r\n        if (selectedRowIds) {\r\n            dispatch({\r\n                type: 'SELECTED_CHANGE',\r\n                payload: selectedRowIds\r\n            });\r\n        }\r\n    }, [selectedRowIds]);\r\n\r\n    React.useEffect(() => {\r\n        if (sortBy) {\r\n            dispatch({\r\n                type: 'SORT_BY_OBJECT_CHANGED',\r\n                payload: sortBy\r\n            });\r\n        }\r\n    }, [sortBy]);\r\n\r\n    React.useEffect(() => {\r\n        if (filters) {\r\n            dispatch({\r\n                type: 'FILTERS_CHANGED',\r\n                payload: filters\r\n            });\r\n        }\r\n    }, [filters]);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        gotoPage(newPage);\r\n        dispatch({ type: 'PAGE_CHANGED', payload: newPage });\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setPageSize(Number(event.target.value));\r\n    };\r\n\r\n    // Avoid a layout jump when reaching the last page with empty rows.\r\n    const emptyRows = pageIndex > 0 ? Math.max(0, (1 + pageIndex) * pageSize - pageOptions.length) : 0;\r\n\r\n    const [dense] = React.useState(false);\r\n\r\n    const renderNotfound = () => (\r\n        <TableRow>\r\n            <TableCell sx={{ textAlign: 'left' }} colSpan={columns.length + 1}>\r\n                Empty Data\r\n            </TableCell>\r\n        </TableRow>\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <TableContainer {...getTableProps()}>\r\n                <Table aria-labelledby=\"tableTitle\" size={dense ? 'small' : 'medium'}>\r\n                    <TableHead>\r\n                        {headerGroups.map((headerGroup) => (\r\n                            <TableRow {...headerGroup.getHeaderGroupProps()}>\r\n                                {headerGroup.headers.map((column) => (\r\n                                    <TableCell\r\n                                        {...(column.id === 'selection'\r\n                                            ? column.getHeaderProps()\r\n                                            : column.getHeaderProps(column.getSortByToggleProps()))}\r\n                                        sx={{ padding: 0.5, minWidth: column.minWidth, textAlign: 'left' }}\r\n                                    >\r\n                                        <TableSortLabel\r\n                                            active={column.isSorted}\r\n                                            direction={column.isSortedDesc ? 'desc' : 'asc'}\r\n                                            IconComponent={ArrowDropDownIcon}\r\n                                        >\r\n                                            {column.render('Header')}\r\n                                            {column.id !== 'selection' ? (\r\n                                                <Box component=\"span\" sx={visuallyHidden}>\r\n                                                    {column.isSortedDesc ? 'sorted descending' : 'sorted ascending'}\r\n                                                </Box>\r\n                                            ) : null}\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                ))}\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableHead>\r\n\r\n                    {showCustomFilter && (\r\n                        <TableHead>\r\n                            {headerGroups.map((headerGroup) => (\r\n                                <TableRow {...headerGroup.getHeaderGroupProps()} sx={{ textAlign: 'center' }}>\r\n                                    {headerGroup.headers.map((column) => {\r\n                                        if (column.id === 'selection')\r\n                                            return (\r\n                                                <TableCell {...column.getHeaderProps()} onClick={onClear}>\r\n                                                    <Typography sx={{ cursor: 'pointer' }}>Clear</Typography>\r\n                                                </TableCell>\r\n                                            );\r\n                                        return (\r\n                                            <TableCell {...column.getHeaderProps()} sx={{ px: 1 }}>\r\n                                                {column.canFilter ? column.render('Filter') : null}\r\n                                            </TableCell>\r\n                                        );\r\n                                    })}\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableHead>\r\n                    )}\r\n\r\n                    <TableBody {...getTableBodyProps()}>\r\n                        {!Boolean(data.length) && renderNotfound()}\r\n\r\n                        {page.map((row) => {\r\n                            prepareRow(row);\r\n                            return (\r\n                                <TableRow\r\n                                    hover\r\n                                    {...row.getRowProps()}\r\n                                    onClick={() => onClickRowItem?.(row)}\r\n                                    sx={{ textDecoration: 'none', cursor: 'pointer' }}\r\n                                >\r\n                                    {row.cells.map((cell) => {\r\n                                        return (\r\n                                            <TableCell {...cell.getCellProps()} sx={{ padding: 0.5 }}>\r\n                                                {cell.render('Cell')}\r\n                                            </TableCell>\r\n                                        );\r\n                                    })}\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n\r\n                        {emptyRows > 0 && (\r\n                            <TableRow\r\n                                style={{\r\n                                    height: (dense ? 33 : 53) * emptyRows\r\n                                }}\r\n                            >\r\n                                <TableCell colSpan={columns.length + 1} />\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                component=\"div\"\r\n                rowsPerPageOptions={[10, 20, 50]}\r\n                count={pageOptions.length}\r\n                rowsPerPage={queryPageSize}\r\n                page={queryPageIndex}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={handleChangeRowsPerPage}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FETable;\r\n\r\nconst IndeterminateCheckbox = React.forwardRef(({ indeterminate, ...rest }: { indeterminate: any }, ref) => {\r\n    const defaultRef = React.useRef<any>();\r\n    const resolvedRef: any = ref || defaultRef;\r\n\r\n    React.useEffect(() => {\r\n        resolvedRef.current.indeterminate = indeterminate;\r\n    }, [resolvedRef, indeterminate]);\r\n\r\n    return (\r\n        <>\r\n            <Checkbox\r\n                ref={resolvedRef}\r\n                {...rest}\r\n                onClick={(event) => {\r\n                    event.stopPropagation();\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n});\r\n","import { BaseApiService } from 'services/core/baseApi.service';\r\n\r\nclass PartnerService extends BaseApiService {\r\n    constructor() {\r\n        super('/v1/partners');\r\n    }\r\n}\r\n\r\nexport default new PartnerService();\r\n","import { Box, Button, InputAdornment, OutlinedInput, Stack, Tooltip, Typography } from '@mui/material';\r\nimport { styled, useTheme } from '@mui/material/styles';\r\nimport { shouldForwardProp } from '@mui/system';\r\nimport { IconDownload, IconPlus, IconSearch, IconTrash, IconUpload, IconUser } from '@tabler/icons';\r\nimport TableContext from 'contexts/TableContext';\r\nimport useAuth from 'hooks/useAuth';\r\nimport { useContext, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport eventEmitter from 'utils/eventEmitter';\r\n\r\nconst OutlineInputStyle = styled(OutlinedInput, { shouldForwardProp })(({ theme }) => ({\r\n    width: 434,\r\n    height: 36,\r\n    marginLeft: 16,\r\n    marginRight: 16,\r\n    paddingLeft: 16,\r\n    paddingRight: 16,\r\n    '& input': {\r\n        background: 'transparent !important',\r\n        paddingLeft: '4px !important'\r\n    },\r\n    [theme.breakpoints.down('lg')]: {\r\n        width: 250\r\n    },\r\n    [theme.breakpoints.down('md')]: {\r\n        width: 100,\r\n        // marginLeft: 4,\r\n        background: theme.palette.mode === 'dark' ? theme.palette.dark[800] : '#fff'\r\n    }\r\n}));\r\n\r\nconst Input = styled('input')({\r\n    display: 'none'\r\n});\r\n\r\nconst ActionPartner = ({ onClickUser, urlAddTicket, onClickDownload, onUploadFile, onClickTrash, title = 'Partner List' }) => {\r\n    const theme = useTheme();\r\n    const { user } = useAuth();\r\n\r\n    const [{ selectedIds }] = useContext(TableContext);\r\n\r\n    const [value, setValue] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        eventEmitter.emit('SEARCH_TICKET_LIST', { value });\r\n    }, [value]);\r\n\r\n    const handleFileSelect = (event) => {\r\n        onUploadFile?.(event.target.files[0]);\r\n    };\r\n\r\n    const renderActionList = () => (\r\n        <>\r\n            <Typography sx={{ mb: 1 }}>{`${title} - ${_.keys(selectedIds).length} Selected`}</Typography>\r\n            <Stack direction=\"row\" spacing={1.5} sx={{ marginBottom: 1 }}>\r\n                <Tooltip title=\"Download\">\r\n                    <Button sx={{ ...styles.btn, minWidth: 36, padding: 0 }} variant=\"outlined\" onClick={onClickDownload}>\r\n                        <IconDownload size={18} />\r\n                    </Button>\r\n                </Tooltip>\r\n\r\n                <Tooltip title=\"Upload\">\r\n                    <label style={{ display: 'flex' }} htmlFor=\"contained-button-file\">\r\n                        <Input\r\n                            accept=\".xlsx, .xls, .csv\"\r\n                            type=\"file\"\r\n                            id=\"contained-button-file\"\r\n                            onChange={handleFileSelect}\r\n                            onClick={(e: any) => {\r\n                                e.target.value = null;\r\n                            }}\r\n                        />\r\n                        <Button sx={{ ...styles.btn, minWidth: 36, padding: 0 }} component=\"span\" variant=\"outlined\">\r\n                            <IconUpload size={18} />\r\n                        </Button>\r\n                    </label>\r\n                </Tooltip>\r\n\r\n                <Tooltip title=\"Delete\">\r\n                    <Button onClick={onClickTrash} sx={{ ...styles.btn, minWidth: 36, padding: 0 }} variant=\"outlined\">\r\n                        <IconTrash size={18} />\r\n                    </Button>\r\n                </Tooltip>\r\n\r\n                <Tooltip title=\"Toggle Mode\">\r\n                    <Button sx={{ ...styles.btn, minWidth: 36, padding: 0 }} variant=\"outlined\" onClick={onClickUser}>\r\n                        <IconUser size={18} />\r\n                    </Button>\r\n                </Tooltip>\r\n\r\n                <Box sx={{ flexGrow: 1 }} />\r\n\r\n                <Box>\r\n                    <OutlineInputStyle\r\n                        id=\"input-search-header\"\r\n                        value={value}\r\n                        onChange={(e) => setValue(e.target.value)}\r\n                        placeholder=\"Search\"\r\n                        startAdornment={\r\n                            <InputAdornment position=\"start\">\r\n                                <IconSearch stroke={1.5} size=\"1rem\" color={theme.palette.grey[500]} />\r\n                            </InputAdornment>\r\n                        }\r\n                        aria-describedby=\"search-helper-text\"\r\n                        inputProps={{ 'aria-label': 'weight' }}\r\n                        sx={{ height: 36 }}\r\n                    />\r\n                </Box>\r\n\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    sx={{ borderColor: '#E5E5E5', color: '#008345', borderRadius: 2, height: 36, fontSize: 12, fontWeight: 'bold' }}\r\n                    startIcon={<IconPlus color=\"#008345\" size={18} />}\r\n                    component={Link}\r\n                    to={urlAddTicket}\r\n                >\r\n                    Add New\r\n                </Button>\r\n            </Stack>\r\n        </>\r\n    );\r\n\r\n    return renderActionList();\r\n};\r\n\r\nexport default ActionPartner;\r\n\r\nconst styles = {\r\n    btn: {\r\n        borderColor: '#E5E5E5',\r\n        height: 36\r\n    }\r\n};\r\n","import { IconButton, Menu, MenuItem } from '@mui/material';\r\nimport { IconDotsVertical } from '@tabler/icons';\r\nimport FETable from 'components/table/FETable';\r\nimport { camelCase, startCase } from 'lodash';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\n\r\nconst PosList = ({ data = [], loading, cols = [], onClickRowItem }) => {\r\n    const [anchorEl, setAnchorEl] = useState<Element | ((element: Element) => Element) | null | undefined>(null);\r\n    const handleClick = (event: SyntheticEvent) => {\r\n        setAnchorEl(event?.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    const productsColumns = React.useMemo(\r\n        () =>\r\n            cols[0]\r\n                ? cols.map((key: any) => {\r\n                      if (key === 'action') {\r\n                          return {\r\n                              Header: startCase(camelCase(key)),\r\n                              accessor: key,\r\n                              Cell: ({ value }) => (\r\n                                  <IconButton onClick={handleClick}>\r\n                                      <IconDotsVertical />\r\n                                  </IconButton>\r\n                              ),\r\n                              Filter: ''\r\n                          };\r\n                      }\r\n                      return {\r\n                          Header: startCase(camelCase(key)),\r\n                          accessor: key,\r\n                          Cell: ({ value }) => (\r\n                              <div\r\n                                  style={{\r\n                                      maxHeight: 40,\r\n                                      overflow: 'hidden'\r\n                                  }}\r\n                              >\r\n                                  {value}\r\n                              </div>\r\n                          ),\r\n                          Filter: ''\r\n                      };\r\n                  })\r\n                : [],\r\n        [cols]\r\n    );\r\n\r\n    const productsData = React.useMemo(() => [...data], [data]);\r\n\r\n    return (\r\n        <MainCard content={false} border={false}>\r\n            <Menu\r\n                id=\"menu-followers-card\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n                variant=\"selectedMenu\"\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right'\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'right'\r\n                }}\r\n            >\r\n                <MenuItem onClick={handleClose} sx={{ color: '#27AE60', fontSize: 12, fontWeight: 500 }}>\r\n                    Edit\r\n                </MenuItem>\r\n                <MenuItem onClick={handleClose} sx={{ color: '#808080', fontSize: 12, fontWeight: 500 }}>\r\n                    View\r\n                </MenuItem>\r\n                <MenuItem onClick={handleClose} sx={{ color: '#FF0015', fontSize: 12, fontWeight: 500 }}>\r\n                    Delete\r\n                </MenuItem>\r\n            </Menu>\r\n            {loading ? (\r\n                <div>loading...</div>\r\n            ) : (\r\n                <FETable rowId=\"ID\" onClickRowItem={onClickRowItem} data={productsData} columns={productsColumns} />\r\n            )}\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default PosList;\r\n","import { Box, Grid } from '@mui/material';\r\nimport ActionPartner from 'components/ActionPartner';\r\nimport TableContext from 'contexts/TableContext';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useQuery } from 'react-query';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport partnerServices from 'services/partner-services';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport eventEmitter from 'utils/eventEmitter';\r\nimport toastify from 'utils/toastify';\r\nimport PartnerList from './list';\r\n\r\nconst PosPage = () => {\r\n    const [{ queryPageIndex, queryPageSize, sortByObject, filters, selectedIds, resetState }, dispatch] = useContext(TableContext);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n\r\n    const {\r\n        isLoading,\r\n        data: dataTable,\r\n        refetch: refetchTable\r\n    } = useQuery(\r\n        ['pos_table', queryPageIndex, queryPageSize, searchTerm, sortByObject, filters],\r\n        () => {\r\n            const page_size = `per_page=${queryPageSize}&page=${queryPageIndex + 1}`;\r\n            const search = searchTerm?.length === 0 ? '' : `&keyword=${searchTerm}`;\r\n            const view_type = `view_type=${3}`;\r\n            const sortByProps = Boolean(sortByObject.length)\r\n                ? `&order_by=${sortByObject[0]?.id ?? 'ticket_id'}&sorted_by=${sortByObject[0]?.desc ? 'desc' : 'asc'}`\r\n                : '';\r\n            const filtersByData = Boolean(filters)\r\n                ? _.map(filters, (it) => {\r\n                      const isDateType = ['created_date', 'last_status_date'].includes(it.id);\r\n                      return `&${it.id}=${isDateType ? moment(it.value).format('DD/MM/YYYY') : it.value}`;\r\n                  }).join('')\r\n                : '';\r\n\r\n            return partnerServices.getAll(`${page_size}${search}&${view_type}${sortByProps}${filtersByData}`);\r\n        },\r\n        {\r\n            keepPreviousData: true,\r\n            // staleTime: Infinity\r\n            onError: (err: any) => {\r\n                toastify.showToast('error', err.message);\r\n            },\r\n            onSuccess: (res) => {\r\n                dispatch({\r\n                    type: 'TOTAL_COUNT_CHANGED',\r\n                    payload: res.data?.meta?.pagination?.total\r\n                });\r\n            }\r\n        }\r\n    );\r\n\r\n    const navi = useNavigate();\r\n\r\n    const onClickRowItem = (row) => {\r\n        // navi(row.values?.ticket_id?.toString());\r\n    };\r\n\r\n    const handleSearch = _.debounce(\r\n        ({ value }) => {\r\n            setSearchTerm(value);\r\n        },\r\n        1500,\r\n        {\r\n            maxWait: 1500\r\n        }\r\n    );\r\n\r\n    useEffect(() => {\r\n        eventEmitter.addListener('SEARCH_TICKET_LIST', handleSearch);\r\n\r\n        return () => {\r\n            eventEmitter.removeAllListeners();\r\n        };\r\n    }, []);\r\n\r\n    const onClickDownload = () => {};\r\n    const onUploadFile = () => {};\r\n    const onClickTrash = () => {};\r\n    const onClickUser = () => {};\r\n    return (\r\n        <Box sx={{ display: 'flex' }}>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <MainCard contentSX={{ p: 2 }}>\r\n                        <ActionPartner\r\n                            onClickDownload={onClickDownload}\r\n                            onClickUser={onClickUser}\r\n                            urlAddTicket=\"\"\r\n                            onUploadFile={onUploadFile}\r\n                            onClickTrash={onClickTrash}\r\n                            title=\"Sub Partner List\"\r\n                        />\r\n                        <PartnerList\r\n                            onClickRowItem={onClickRowItem}\r\n                            loading={isLoading}\r\n                            data={dataTable?.data?.data}\r\n                            cols={dataTable?.data?.cols}\r\n                        />\r\n                    </MainCard>\r\n                </Grid>\r\n            </Grid>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default PosPage;\r\n"],"sourceRoot":""}